<?php


namespace App\Services;

use App\Models\Config;
use App\Repositories\Interfaces\ConfigRepositoryInterface;
use App\Services\Base\BaseService;
use App\Utils\SqlUtil;
use Illuminate\Support\Str;

class ConfigService extends BaseService
{
    protected $repo_base;
    protected $is_app;
    protected $with;


    public function __construct(
        ConfigRepositoryInterface $repo_base
    ) {
        $this->repo_base                = $repo_base;
        $this->with                     = [];
    }

    public function getModelName()
    {
        return 'Cấu hình';
    }

    public function getTableName()
    {
        return (new Config())->getTable();
    }

    public function getAllApp()
    {
        $this->is_app = false;
        $datas = $this->repo_base->findWhereBy(['status' => Config::HOAT_DONG]);
        return [
            'code' => '200',
            'data' => $this->formatSelectDataAll($datas),
        ];
    }

    public function formatSelectData($datas) {
        $res = [];
        foreach($datas as $data) {
            array_push($res, $this->formatData($data));
        }
        return $res;
    }

    public function formatSelectDataAll($datas) {
        $res = [];
        foreach($datas as $data) {
            array_push($res, $this->formatData($data));
        }
        $isAdv = env('IS_ADV', false);
        if($isAdv){
            array_push($res, config('adv_config.bank'));
        }
        return $res;
    }

    public function checkInputs($inputs, $id)
    {
        $this->is_app = isset($inputs['is_app']) ? $inputs['is_app'] : false;
        unset($inputs['is_app']);
        if (!isset($inputs['name'])) {
            return ['is_failed' => true, 'code' => '003', 'message' => 'tên'];
        }
        if (!isset($inputs['value'])) {
            return ['is_failed' => true, 'code' => '003', 'message' => 'Giá trị'];
        }
        if (!isset($inputs['type'])) {
            return ['is_failed' => true, 'code' => '003', 'message' => 'Loại'];
        }
        if ($this->repo_base->existByWhere([
            'name' => $inputs['name'],
            'type' => $inputs['type']
        ], $id)) {
            return ['is_failed' => true, 'code' => '005', 'message' => 'Tên '];
        }

        if (isset($inputs['medias'])) {
            $inputs['medias'] = json_encode($inputs['medias'], JSON_UNESCAPED_UNICODE);
        }

        if (isset($inputs['data'])) {
            $inputs['data'] = json_encode($inputs['data'], JSON_UNESCAPED_UNICODE);
        }

        $inputs['slug'] = null;
        if (in_array($inputs['type'], [
            Config::THONG_TIN_VE_CUDIDI,
            Config::HUY_TAI_KHOAN_KH,
            Config::HUY_TAI_KHOAN_TX,
            Config::CHINH_SACH_KH,
            Config::DIEU_KHOAN_KH,
            Config::CHINH_SACH_TX,
            Config::NOI_DUNG_LAM_DEP,
            Config::NOI_DUNG_GIAO_DUC,
            Config::NOI_DUNG_Y_TE,
            Config::NOI_DUNG_SUC_KHOE_VA_DU_LICH,
            Config::NOI_DUNG_SALON_O_TO,
            Config::NOI_DUNG_THUE_TAI_XE,
            Config::NOI_DUNG_BAO_DUONG_TAI_XE,
            Config::NOI_DUNG_BAO_HIEM_TAI_XE,
            Config::LOGIN_CHINH_SACH_TX,
            Config::LOGIN_DIEU_KHOAN_TX,
        ])) {
            $inputs['slug'] = Str::slug($inputs['name']);
        }

        return [
            'is_failed' => false,
            'inputs' => $inputs
        ];
    }

    public function generateColumn($inputs, $columns)
    {
        if (isset($inputs['status']) && $inputs['status'] !== 'all') {
            array_push($columns, $this->getTableName() . '.status = \'' . $inputs['status'] . '\'');
        }
        if (isset($inputs['type']) && $inputs['type'] !== 'all') {
            array_push($columns, $this->getTableName() . '.type = \'' . $inputs['type'] . '\'');
        }
        return $columns;
    }

    public function formatData($data)
    {
        $res =  parent::formatData($data); // TODO: Change the autogenerated stub
        $res['medias'] = [];
        $res['data'] = [];
        if (isset($data->medias)) {
            $res['medias'] = json_decode($data->medias, true);
        }
        if (isset($data->data)) {
            $res['data'] = json_decode($data->data, true);
        }
        return $res;
    }

    public function getOneBy($inputs)
    {
        return [
            'code' => '200',
            'data' => $this->findOneBy($inputs)
        ];
    }

    public function findOneBy($inputs)
    {
        return $this->repo_base->findOneBy($inputs);
    }

    public function generateQuery($terms, $columns)
    {
        $sql_util = new SqlUtil();
        $search = null;

        if(is_string($terms) && !empty($terms)){
            $search = '"'. trim($terms). '"';
        } else if(is_array($terms) && count($terms) > 0){
            foreach ($terms as $term) {
                if (!is_array($term)) {
                    if(!empty($term)) {
                        $search = '"'. trim($terms). '"';
                    }
                } else if(count($term) > 0){
                    $conditions = [];
                    foreach ($term as $cond) {
                        if(in_array($cond['field'], $this->getQueryDateField())){
                            $conditions[] = $sql_util->generateDateField($cond);
                        } else if(in_array($cond['field'], $this->getQueryField())){
                            $conditions[] = $sql_util->generateNormalField($cond);
                        }
                    }
                    if(count($conditions) > 0) {
                        $columns[] = '('. implode(' OR ', $conditions) .')';
                    }
                }
            }
        }

        return [
            'columns' => $columns,
            'search' => $search
        ];
    }

    public function getQueryDateField()
    {
        return [
            $this->getTableName() . '.created_at',
            $this->getTableName() . '.updated_at'
        ];
    }

    public function getQueryField()
    {
        return [
            $this->getTableName() . '.id',
            $this->getTableName() . '.name',
            $this->getTableName() . '.value',
            $this->getTableName() . '.data',
            $this->getTableName() . '.type',
            $this->getTableName() . '.status',
        ];
    }

    public function getDictByTypes($inputs)
    {
        $res = $this->repo_base->getDictByTypes($inputs['types']);
        return [
            'code' => '200',
            'data' => $res
        ];
    }
}
